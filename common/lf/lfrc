# comment--> the general ui of lf
#set drawbox false
# set color256
set preview true
set hidden true
set icons true
set ignorecase true
set smartcase
set incsearch
set info size
set timefmt '2006-01-02 15:04:05 -0700'
set sortby natural

# comment--> interpreter for shell commands
set shell pwsh

# comment--> vim like
set number
set relativenumber


# comment--> window ratio
set ratios '1:2:3'

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

set promptfmt "
\033[38;5;8m\033[48;5;236m %u@%h \033[38;5;236m\033[48;5;234m
\033[38;5;8m\033[48;5;234m %w/%f \033[0m\033[38;5;234m\033[0m
"

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}



# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
map f broot_jump

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
map o open_config
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gtr cd ~/.local/share/Trash/files
map gus cd /run/media/brodie

map gv. cd ~/videos
map gva cd ~/videos/anime

map gy. cd ~/videos/youtube
map gyt cd ~/videos/youtube/ToUpload
map gyu cd ~/videos/youtube/Uploaded
map gya cd ~/videos/youtube/asset
map go. cd ~/videos/podcast
map got cd ~/videos/podcast/ToUpload
map gou cd ~/videos/podcast/Uploaded

map gp. cd ~/pictures
map gpm cd ~/pictures/mpvscreenshots
map gpa cd ~/pictures/Anime
map gps cd ~/pictures/screenshots

map gw. cd ~/pictures/Wallpapers
map gww cd ~/pictures/Wallpapers/Wallpapers
map gwm cd ~/pictures/Wallpapers/MobileWallpapers

map gt. cd ~/documents/Textbooks
map gt1 cd ~/documents/Textbooks/1stYear
map gt2 cd ~/documents/Textbooks/2ndYear
map gt3 cd ~/documents/Textbooks/3rdYear
map gu3 cd ~/documents/Uni/3rdYear
map gd cd ~/documents

map gD cd ~/downloads
map ge cd ~/desktop

map gs. cd ~/scripts
map gsl cd ~/scripts/lf
map gsa cd ~/scripts/alsa
map gsi cd ~/scripts/i3
map gse cd ~/scripts/lemonbar
map gsp cd ~/scripts/polybar
map gsb cd ~/scripts/bspwm
map gsu cd ~/scripts/pulse
map gdt cd ~/scripts/transmission

map gr. cd ~/repos
map grb cd ~/repos/bookmenu
map grf cd ~/repos/cleanfullscreen
map grm cd ~/repos/dmenu
map grd cd ~/repos/dotfiles
map gri cd ~/repos/init
map grk cd ~/repos/kanban-board
map grl cd ~/repos/lbryurlconvert
map grP cd ~/repos/PerlProjects
map grr cd ~/repos/reading-list
map grs cd ~/repos/st
map grw cd ~/repos/website

map gc cd ~/.config
map gC cd ~/.local/share/cell
map gl cd ~/.local
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share

map \;j cd ~





